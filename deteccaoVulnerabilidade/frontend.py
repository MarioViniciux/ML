import streamlit as st
import requests

API_URL = "http://127.0.0.1:8000/analyze"

STRIDE_EXPLANATIONS = {
    "Spoofing": "Amea√ßa de um ator malicioso se passar por outro usu√°rio, componente ou sistema.",
    "Tampering": "Amea√ßa de modifica√ß√£o n√£o autorizada de dados em tr√¢nsito ou armazenados.",
    "Repudiation": "Amea√ßa relacionada √† incapacidade de rastrear uma a√ß√£o at√© seu autor.",
    "Information Disclosure": "Amea√ßa de exposi√ß√£o de informa√ß√µes sens√≠veis a indiv√≠duos n√£o autorizados.",
    "Denial of Service": "Amea√ßa de tornar um sistema ou recurso indispon√≠vel para seus usu√°rios.",
    "Elevation of Privilege": "Amea√ßa de um usu√°rio obter permiss√µes mais altas do que as que deveria ter."
}

st.set_page_config(page_title="An√°lise STRIDE com Transformer", layout="wide")
st.title("üöÄ An√°lise de Amea√ßas STRIDE com Transformer (IA Avan√ßada)")
st.markdown("Descreva uma funcionalidade. A IA usar√° um modelo de linguagem avan√ßado para identificar amea√ßas.")

system_description = st.text_area("Descri√ß√£o do Sistema ou Funcionalidade:", height=150, placeholder="Ex: Um usu√°rio pode ver o extrato de outro usu√°rio apenas mudando o ID na URL.")

prediction_threshold = st.slider(
    "Limiar de Confian√ßa para Amea√ßas", 
    min_value=0.0, max_value=1.0, value=0.6, step=0.05
)

if st.button("Analisar Amea√ßas"):
    if system_description:
        with st.spinner('Analisando com o modelo Transformer... Isso pode levar alguns segundos.'):
            try:
                payload = {"description": system_description}
                response = requests.post(API_URL, json=payload)
                response.raise_for_status()
                
                results = response.json()
                probabilities = results.get("probabilities", {})

                st.subheader("Resultados da An√°lise:")
                
                cols = st.columns(len(STRIDE_EXPLANATIONS))
                found_any_threat = False
                
                sorted_probs = sorted(probabilities.items(), key=lambda item: item[1], reverse=True)
                
                for category, prob in sorted_probs:
                    if category == "Benign":
                        continue

                    col_index = list(STRIDE_EXPLANATIONS.keys()).index(category)

                    with cols[col_index]:
                        is_threat = prob >= prediction_threshold
                        st.metric(label=category, value=f"{prob:.2%}")

                        if is_threat:
                            found_any_threat = True
                            st.error(f"Amea√ßa Detectada", icon="üö®")
                            with st.expander("Detalhes"):
                                st.write(STRIDE_EXPLANATIONS[category])
                        else:
                            st.success("OK", icon="‚úÖ")

                if not found_any_threat:
                    st.info("Nenhuma amea√ßa identificada com o limiar de confian√ßa atual.")

            except requests.exceptions.RequestException as e:
                st.error(f"Erro ao conectar com a API: {e}")
                st.error("Verifique se o backend (servidor FastAPI) est√° rodando.")
    else:
        st.warning("Por favor, insira uma descri√ß√£o para ser analisada.")